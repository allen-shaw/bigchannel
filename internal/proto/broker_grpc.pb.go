// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: broker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	// producer
	Send(ctx context.Context, opts ...grpc.CallOption) (Broker_SendClient, error)
	// consumer
	Receive(ctx context.Context, opts ...grpc.CallOption) (Broker_ReceiveClient, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Send(ctx context.Context, opts ...grpc.CallOption) (Broker_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Broker_ServiceDesc.Streams[0], "/proto.Broker/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerSendClient{stream}
	return x, nil
}

type Broker_SendClient interface {
	Send(*SendRequest) error
	Recv() (*SendResponse, error)
	grpc.ClientStream
}

type brokerSendClient struct {
	grpc.ClientStream
}

func (x *brokerSendClient) Send(m *SendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerSendClient) Recv() (*SendResponse, error) {
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Receive(ctx context.Context, opts ...grpc.CallOption) (Broker_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Broker_ServiceDesc.Streams[1], "/proto.Broker/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerReceiveClient{stream}
	return x, nil
}

type Broker_ReceiveClient interface {
	Send(*ReceiveRequest) error
	Recv() (*ReceiveResponse, error)
	grpc.ClientStream
}

type brokerReceiveClient struct {
	grpc.ClientStream
}

func (x *brokerReceiveClient) Send(m *ReceiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerReceiveClient) Recv() (*ReceiveResponse, error) {
	m := new(ReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/proto.Broker/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	// producer
	Send(Broker_SendServer) error
	// consumer
	Receive(Broker_ReceiveServer) error
	Ack(context.Context, *AckRequest) (*AckResponse, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (UnimplementedBrokerServer) Send(Broker_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedBrokerServer) Receive(Broker_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedBrokerServer) Ack(context.Context, *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Send(&brokerSendServer{stream})
}

type Broker_SendServer interface {
	Send(*SendResponse) error
	Recv() (*SendRequest, error)
	grpc.ServerStream
}

type brokerSendServer struct {
	grpc.ServerStream
}

func (x *brokerSendServer) Send(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerSendServer) Recv() (*SendRequest, error) {
	m := new(SendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Receive(&brokerReceiveServer{stream})
}

type Broker_ReceiveServer interface {
	Send(*ReceiveResponse) error
	Recv() (*ReceiveRequest, error)
	grpc.ServerStream
}

type brokerReceiveServer struct {
	grpc.ServerStream
}

func (x *brokerReceiveServer) Send(m *ReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerReceiveServer) Recv() (*ReceiveRequest, error) {
	m := new(ReceiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Broker/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ack",
			Handler:    _Broker_Ack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Broker_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Receive",
			Handler:       _Broker_Receive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "broker.proto",
}
